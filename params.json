{"name":"Culib","tagline":"DirectUI Userinterface Library for Wince","body":"﻿CULib\r\n=====   \r\n\r\n该项目基于Duilib界面库，实现一个运行于Wince平台的界面库CULib。该界面库针对嵌入式硬件的特点和Wince操作系统的特性对Duilib进行重构和优化。CULib将用户界面和处理逻辑分离，极大地提高用户界面的开发效率。并且使用xml来描述界面风格和界面布局，可以很方便地构建高效、绚丽、易于扩展的界面，而且xml语法简单，易于学习和掌握。     \r\n\r\n在Wince环境下的GUI软件一般采用传统的MFC界面库，开发出的软件不美观、界面细节处理不好、使用硬编码、开发效率低下、生成程序体积大，而且传统MFC界面美化大都使用HOOK等对系统影响比较大的技术，可能会导致系统不稳定或引发其他错误。CULib库采用DirectUI技术，完全基于GDI在窗口上自绘，弥补了MFC等传统界面库在Wince上的不足。CULib的出现使得在Wince这样的嵌入式环境中构建绚丽的界面变得简单、高效。  \r\n\r\n\r\nCULib具有以下一些特点：   \r\n\r\n- 界面与业务逻辑分离；\r\n- 使用xml配置界面；\r\n- 界面布局方式灵活多样；\r\n- 支持ZIP和DLL两种资源方式；\r\n- 支持png、gif、jpg等多种图片格式；\r\n- 内置常用的控件；\r\n- 支持自定义控件；\r\n- 支持插件系统；\r\n- 强大的事件处理机制；\r\n- 类html字符串绘制技术；\r\n- 基于GDI和脏矩形的高效绘制技术；\r\n- 支持alpha混合和图片透明；\r\n- 支持动态色调变换；\r\n- 内存占用小。\r\n- 支持键盘焦点切换。\r\n- 增加日志功能。  \r\n\r\n\r\n**源码结构**  \r\n\r\n![](https://github.com/chenfjm/CULib/tree/gh-pages/images/MainFrame.jpg)   \r\n\r\n**使用方法**  \r\n\r\n1.界面库引入：  \r\n\r\n    #include <windows.h>\r\n    #include <objbase.h>\r\n    #include \"CULib.h\"\r\n    using namespace CULib;\r\n    #ifdef _DEBUG\r\n    #pragma comment(lib,\"..\\\\bin\\\\CULib_d.lib\")\r\n    #else\r\n    #pragma comment(lib,\"..\\\\bin\\\\CULib.lib\")\r\n    #endif  \r\n\r\n这部分主要是包含一些使用CULib所需的头文件，并自动链接相应的CULib库。一般不用改动，需要注意的是CULib.h头文件和CULib.lib等库文件在磁盘中的位置。  \r\n\r\n2.增加窗口实例：  \r\n\r\n    class CFrameWindowWnd : public CWindowWnd, public INotifyUI\r\n    {\r\n    public:\r\n\tCFrameWindowWnd() { };\r\n\tLPCTSTR GetWindowClassName() const { return _T(\"UIMainFrame\"); };\r\n\tUINT GetClassStyle() const { return  CS_DBLCLKS ; }\r\n\tvoid OnFinalMessage(HWND /*hWnd*/) { delete this; };\r\n\tvoid Init() \r\n\t{\r\n            /** 程序初始化 */\r\n\t}\r\n\tvoid Notify(TNotifyUI& msg)\r\n\t{\r\n\t   /** 事件处理 */\r\n\t}\r\n\r\n\t/** 消息处理 */\r\n\tLRESULT  OnCreate(uMsg, wParam, lParam, bHandled); \r\n\tLRESULT  OnClose(uMsg, wParam, lParam, bHandled); \r\n\tLRESULT  OnDestroy(uMsg, wParam, lParam, bHandled); \r\n\tLRESULT  OnActivate(uMsg, wParam, lParam, bHandled);\r\n\tLRESULT  OnSize(uMsg, wParam, lParam, bHandled); \r\n\tLRESULT  OnSysCommand(uMsg, wParam, lParam, bHandled); \r\n\tLRESULT  HandleMessage(UINT uMsg, WPARAM wParam, LPARAM lParam)\r\n\t{\r\n\t\t/** 消息响应 */\r\n\tLRESULT lRes = 0;\r\n\tBOOL bHandled = TRUE;\r\n\tswitch( uMsg ) {\r\n    \tcase WM_CREATE:     \r\n     \t  lRes = OnCreate(uMsg, wParam, lParam, bHandled); break;\r\n\tcase WM_CLOSE:   \r\n      \t  lRes = OnClose(uMsg, wParam, lParam, bHandled); break;\r\n\tcase WM_DESTROY: \r\n     \t  lRes = OnDestroy(uMsg, wParam, lParam, bHandled); break;\r\n\tcase WM_ACTIVATE:      \r\n \t  lRes = OnActivate(uMsg, wParam, lParam, bHandled); break;\r\n\tcase WM_SIZE:       \r\n     \t  lRes = OnSize(uMsg, wParam, lParam, bHandled); break;\r\n\tcase WM_SYSCOMMAND: \r\n      \t  lRes = OnSysCommand(uMsg, wParam, lParam, bHandled); break;\r\n\tdefault:\r\n\t\tbHandled = FALSE;\r\n\t}\r\n\tif( bHandled ) return lRes;\r\n\tif( m_pm.MessageHandler(uMsg, wParam, lParam, lRes) ) return lRes;\r\n\treturn CWindowWnd::HandleMessage(uMsg, wParam, lParam);\r\n\t}\r\n    public:\r\n\tCPaintManagerUI m_pm;\r\n    };  \r\n\r\n该部分是基本的窗口实现类和简单的消息响应，HandleMessage对消息进行预处理，之后传递给CPaintManagerUI::MessageHandler进行处理。Notify是对程序的事件处理，该事件通知是由控件对象向用户程序发送的。  \r\n\r\n3.编写程序入口与CULib初始化：  \r\n\r\n    int WINAPI WinMain(HINSTANCE hInstance, \r\n    HINSTANCE /*hPrevInstance*/,\r\n    LPWSTR /*lpCmdLine*/,\r\n     int nCmdShow)\r\n    {\r\n\tCPaintManagerUI::SetInstance(hInstance);\r\n\tCPaintManagerUI::SetResourcePath(CPaintManagerUI::GetInstancePath());\r\n\tCPaintManagerUI::SetResourceZip(_T(\"Res.zip\"));\r\n\r\n\tHRESULT Hr = ::CoInitializeEx(NULL,COINIT_MULTITHREADED);\r\n\tif( FAILED(Hr) ) return 0;\r\n\r\n\tCFrameWindowWnd* pFrame = new CFrameWindowWnd();\r\n\tif( pFrame == NULL ) return 0;\r\n\tpFrame->Create(NULL, _T(\"\"), 0, 0L);\r\n\tpFrame->CenterWindow();\r\n\t::ShowWindow(*pFrame, SW_SHOW);\r\n\tCPaintManagerUI::MessageLoop();\r\n\t::CoUninitialize();\r\n\treturn 0;\r\n    }    \r\n\r\n主要的初始化是设置资源路径，设置资源文件以及创建窗口。最后进入消息循环CPaintManagerUI::MessageLoop()。\r\n为了简化界面库的使用，库中提供了一个非常方便的工具：WindowImpBase。这个类将上述前两部分封装在其内部，并在其中提供了各种默认的虚函数，供派生类重载。通过这个类，用户可以非常方便的来实现一个简单的界面。  \r\n\r\n更多内容请参见[CULib分析文档.pdf](https://github.com/chenfjm/CULib/tree/master/docs/CULib分析文档.pdf)  \r\n详细实现请参见Demo源码   \r\n\r\n**Demo运行结果**  \r\n\r\n![](https://github.com/chenfjm/CULib/tree/gh-pages/images/360Safe.jpg)   \r\n\r\n![](https://github.com/chenfjm/CULib/tree/gh-pages/images/menu.jpg)   \r\n\r\n![](https://github.com/chenfjm/CULib/tree/gh-pages/images/list.jpg)   \r\n\r\nDuilib项目主页：[duilib.googlecode.com](http://duilib.googlecode.com)     ","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}